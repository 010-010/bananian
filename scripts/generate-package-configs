#!/bin/sh

set -e

cd packages

syntaxerr () {
	echo "Syntax error: $1" 1>&2
	exit 1
}

cat <<END > Config.in
#
# This file is AUTO-GENERATED. Please do not edit by hand.
# Changes are overwritten on each \`make *config\`. Edit packages.list instead.
#
# vim: ft=kconfig
END

while read package; do
	case "$package" in
		"#"*|"")
			continue
			;;
	esac
	configname=$(echo "$package" | cut -f 1)
	packagename=$(echo "$package" | cut -f 2 | sed 's/,.*$//' | \
		cut -d : -f 1)
	packagesource=""
	while true; do
		case "$packagesource" in
			"#"*|"")
				read packagesource || syntaxerr \
					"Expected source URL, found EOF"
				continue
				;;
			*)
				break
				;;
		esac
	done
	package_2=""
	while true; do
		case "$package_2" in
			"#"*|"")
				read package_2 || syntaxerr \
					"Expected arch,version,opt; found EOF"
				continue
				;;
			*)
				break
				;;
		esac
	done
	packagever=$(echo "$package_2" | cut -f 1)
	packagepriority=$(echo "$package_2" | cut -f 2)
	packagedeps="#"
	read packagedeps || syntaxerr "Expected dependencies, found EOF"
	while true; do
		case "$packagedeps" in
			"#"*)
				read packagedeps || syntaxerr \
					"Expected dependencies, found EOF"
				continue
				;;
			*)
				break
				;;
		esac
	done

	configdeps=$(echo "$packagedeps" | \
		sed 's/[^, ]*/&_BUILD || &_DOWNLOAD/g' || \
		sed 's/,/ || /g')

	printf "choice %s\n" "$configname"
	printf "\tprompt \"Package %s\"\n" "$packagename"
	[ -n "$packagedeps" ] && printf "\tdepends on %s\n" "$configdeps"
	case "$packagepriority" in
		optional)
			printf "\tdefault %s_DISABLE\n" "$configname"
			;;
		*)
			if [ "x$RELEASE" = "x1" ]; then
				printf "\tdefault %s_DOWNLOAD\n" "$configname"
			else
				printf "\tdefault %s_BUILD\n" "$configname"
			fi
			;;
	esac
	printf "\thelp\n"
	printf "\t  Select whether package is installed, downloaded or built.\n"
	printf "\t  Source URL: $packagesource\n"
	printf "\t  Priority: $packagepriority\n"
	printf "\t  Version: $packagever\n"

	if [ "x$packagepriority" != "xrequired" ]; then
		printf "config %s_DISABLE\n" "$configname"
		printf "\tbool \"Don't install\"\n"
		printf "\thelp\n"
		printf "\t  Do not download and install this package\n\n"
	fi

	printf "config %s_BUILD\n" "$configname"
	printf "\tbool \"Build from source\"\n"
	printf "\thelp\n"
	printf "\t  Download the source code and compile it to a package\n\n"

	if [ "x$RELEASE" = "x1" ]; then
		printf "config %s_DOWNLOAD\n" "$configname"
		printf "\tbool \"Download pre-built\"\n"
		printf "\thelp\n"
		printf "\t  Download a pre-built binary package\n\n"
	else
		printf "config %s_DOWNLOAD\n" "$configname"
		printf "\tbool \"Download pre-built (unsupported)\"\n"
		printf "\thelp\n"
		printf "\t  Download a pre-built binary package\n"
		printf "\t  This is not a release build. Binaries are not available.\n\n"
	fi


	printf "endchoice\n"
done < packages.list >> Config.in
